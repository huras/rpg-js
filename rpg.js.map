{"version":3,"file":"rpg.js","mappings":";;;;;;;;;;;;;;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNO;AACP,iBAAiB,YAAY,YAAY,6CAA6C;AACtF,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B,kDAAkD,wBAAwB;;AAE1E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChEA;AACO;AACP;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA,uBAAuB,eAAe;AACtC,2BAA2B,gBAAgB;AAC3C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,yBAAyB,kCAAkC;AAC3D;;AAEA;AACA,oBAAoB,aAAa;;AAEjC;AACA;AACA;;AAEA,+BAA+B,EAAE,GAAG,EAAE;AACtC;AACA;;AAEA,2BAA2B,EAAE,GAAG,EAAE;;AAElC;AACA,kBAAkB,cAAc;AAChC,kBAAkB,eAAe;AACjC,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;;AAEA;AACA,wBAAwB,2BAA2B;;AAEnD,oCAAoC,SAAS,GAAG,SAAS;AACzD,gDAAgD,0BAA0B;AAC1E,iCAAiC,yCAAyC;AAC1E;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,aAAa,KAAK;AAClB;AACA;;AAEA;AACA,yBAAyB,SAAS;AAClC,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC1GA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNuC;AACT;AACO;;AAErC;AACA,kBAAkB,kDAAS;AAC3B,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA,CAAC;AACD,sCAAsC,cAAc;;;AAGpD,iBAAiB,gDAAQ,WAAW,YAAY;AAChD;;AAEA;AACA;AACA;AACA,sBAAsB,yCAAK;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mB","sources":["webpack://rpg-js/./src/artifacts.js","webpack://rpg-js/./src/characters.js","webpack://rpg-js/./src/world.js","webpack://rpg-js/webpack/bootstrap","webpack://rpg-js/webpack/runtime/define property getters","webpack://rpg-js/webpack/runtime/hasOwnProperty shorthand","webpack://rpg-js/webpack/runtime/make namespace object","webpack://rpg-js/./src/rpg.js"],"sourcesContent":["// Artifact class\nexport class Artifact {\n    constructor(name, position) {\n        this.name = name;\n        this.position = position;\n    }\n}\n\n","export class Character {\n    constructor({position = {x: 0 , y: 0}, job = undefined, speed = 1, inventory = []}) {\n        this.world = undefined;   // Adding a reference to the world\n        this.position = position;\n        this.job = job;\n        this.speed = speed;\n        this.status = 'sleeping';\n        this.inventory = inventory;\n    }\n\n    async moveTo(targetX, targetY) {\n        const position = { x: this.position.x, y: this.position.y };\n        const reached = this.world.moveTo(this, { x: targetX, y: targetY }, this.speed);\n\n        console.log(\"moved from \", position, \" to \", this.position);\n\n        // Return if reached position\n        return this.position.x === targetX && this.position.y === targetY;\n    }\n\n    async gameTick(time) {\n        switch (this.job) {\n            case 'baker':\n                switch (this.status) {\n                    case 'sleeping':\n                        if (time >= 8 && time < 9) {\n                            console.log(\"Woke up\", time);\n                            this.status = 'idle';\n                        } else {\n                            console.log(\"Sleeping\", time);\n                        }\n                        break;\n                    case 'idle':\n                        console.log(\"Reach bakery\", time);\n                        if (await this.moveTo(3, 3)) {\n                            this.status = 'working';\n                        }\n                        break;\n                    case 'working':\n                        if (time <= 17) {\n                            console.log(\"Produce and sell bread in the morning\", time);\n                            this.inventory.push('bread');\n                        } else {\n                            console.log(\"Move to the house\", time);\n                            if (await this.moveTo(0, 0)) {\n                                this.status = 'hobby';\n                            }\n                        }\n                        break;\n                    case 'hobby':\n                        if (time <= 22) {\n                            console.log(\"Playing the piano\", time);\n                        } else {\n                            console.log(\"Going to bed\", time);\n                            this.status = 'sleeping';\n                        }\n                        break;\n                    default:\n                        console.log(\"Unknown status\", this.status);\n                        break;\n                }\n                break;\n        }\n    }\n}\n","// World class\nexport class World {\n    constructor(gridWidth, gridHeight) {\n        this.gridWidth = gridWidth;\n        this.gridHeight = gridHeight;\n        this.gameGrid = Array.from({ length: gridWidth }, () =>\n            Array(gridHeight).fill(undefined)\n        );\n        for(let i = 0; i < gridWidth; i++) {\n            for(let j = 0; j < gridHeight; j++) {\n                this.gameGrid[i][j] = { floor: [], character_or_artifact: undefined }\n            }\n        }\n        this.characters = [];\n        this.jobs = [];\n        this.artifacts = [];\n    }\n\n    addCharacter(character) {\n        this.characters.push(character);\n        this.gameGrid[character.position.x][character.position.y].character_or_artifact = character;\n        character.world = this;\n    }\n\n    addArtifact(artifact) {\n        this.artifacts.push(artifact);\n        this.gameGrid[artifact.position.x][artifact.position.y].character_or_artifact = artifact;\n        artifact.world = this;\n    }\n\n    moveTo(character, targetPosition, speed) {\n        const start = { x: character.position.x, y: character.position.y };\n        const target = { x: targetPosition.x, y: targetPosition.y };\n\n        const path = this.findPath(start, target, [character]);\n        // console.log(path)\n\n        if (path && path.length > 0) {\n            const nextPosition = path[Math.min(speed - 1, path.length - 1)];\n            this.gameGrid[character.position.x][character.position.y].character_or_artifact = undefined;\n            character.position = nextPosition;\n            this.gameGrid[nextPosition.x][nextPosition.y].character_or_artifact = character;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    findPath(start, target, ignore) {\n        const queue = [{ x: start.x, y: start.y, path: [] }];\n        const visited = new Set();\n\n        while (queue.length > 0) {\n            const { x, y, path } = queue.shift();\n\n            if (x === target.x && y === target.y) {\n                return path;\n            }\n\n            if (visited.has(`${x},${y}`) || ![undefined, ...ignore].includes(this.collision(x, y))) {\n                continue;\n            }\n\n            visited.add(`${x},${y}`);\n\n            const moves = [\n                { dx: 1, dy: 0 },\n                { dx: -1, dy: 0 },\n                { dx: 0, dy: 1 },\n                { dx: 0, dy: -1 }\n            ];\n\n            for (const move of moves) {\n                const { x: wrappedX, y: wrappedY } = this.wrapCoordinates(x + move.dx, y + move.dy);\n\n                if (!visited.has(`${wrappedX},${wrappedY}`) && [undefined, ...ignore].includes(this.collision(x, y))) {\n                    const newPath = [...path, { x: wrappedX, y: wrappedY }];\n                    queue.push({ x: wrappedX, y: wrappedY, path: newPath });\n                }\n            }\n        }\n\n        return null;\n    }\n\n    wrapCoordinates(x, y) {\n        x = ((x % this.gridWidth) + this.gridWidth) % this.gridWidth;\n        y = ((y % this.gridHeight) + this.gridHeight) % this.gridHeight;\n        return { x, y };\n    }\n\n    collision(x, y) {\n        var {x,y} = this.wrapCoordinates(x,y);\n        return this.gameGrid[x][y].character_or_artifact;\n    }\n\n    async tick() {\n        for(let day = 0; day < 1; day++) { \n            for (let t = 0; t < 24; t += 0.1) {\n                for (const character of this.characters) {\n                    t = Math.floor(Number.parseFloat(t.toFixed(2)) * 10) / 10;\n                    await character.gameTick(t);\n                }\n            }\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Character} from './characters';\nimport {World} from './world';\nimport {Artifact} from './artifacts';\n\n// // Create instances of Character, Job, and Artifact\nconst baker = new Character({\n    position: { x: 0, y: 0 }, \n    job: 'baker', \n    speed: 2,\n    inventory: [],\n});\n// const woodcutter = new Character({ x: 10, y: 10 }, 'woodcutter', 1);\n\n\nconst tree = new Artifact('tree', { x: 1, y: 0 });\n// const door = new Artifact('door');\n\n// // Create a World instance and add characters, jobs, and artifacts\n// const gridWidth = 50;\n// const gridHeight = 50;\nconst gameWorld = new World(50, 50);\nconsole.log(gameWorld);\ngameWorld.addCharacter(baker);\n// gameWorld.addCharacter(woodcutter);\ngameWorld.addArtifact(tree);\n// gameWorld.addArtifact(door);\n\ngameWorld.tick();\n// // Simulate the game\n// gameWorld.simulateGame();\n\nconsole.log(baker);"],"names":[],"sourceRoot":""}